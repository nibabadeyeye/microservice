package com.gpdi.web.demo.impl;
import com.gpdi.web.demo.dao.TestDao;
import com.gpdi.web.demo.entity.Test;
import com.gpdi.web.demo.service.TestService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import java.io.Serializable;

/**
 * @Description
 * @Author Mr whs
 * @Date date
 */
//@Transactional
@Service
public class TestImpl implements TestService {
    @Autowired
    private TestDao testDao;

    //B方法中抛出异常，A方法也会回滚
    @Override
    public void addTest(Test test) {
        testDao.add(test);
     //        test.setId(1);
     //        testDao.update(test);
     //        new TestImpl().delTestByid(5);
    }
   /*
       事务的主要属性
           1、事务隔离级别（Isolation）
                    1.1、 Isolation.DEFAULT  (默认事务隔离级别)
                    1.2、Isolation.READ_UNCOMMITTED  （读但是不提交）
                    1.3、Isolation.READ_COMMITTED （既读也提交）
                    1.4、Isolation.REPEAT_ABLE_READ  repeatable_read  (mysql 事务级别)
                    1.5、Isolation.SERIALIZABLE  (序列化)
           2、执行方法与事务的关系(Propagation)

                   2.1、REQUIRED(0),
                        有则在事务创建下运行事务，没有则创建
                   2.2、SUPPORTS(1),
                        有则有事务状态下运行，没有则在无事务下运行
                   2.3、MANDATORY(2),
                         必须有事务
                   2.4、REQUIRES_NEW(3),
                         创建新的事务执行
                   2.5、NOT_SUPPORTED(4),
                         在无事务下执行
                   2.6、NEVER(5),
                         在无事务下执行

     */

    public class getOne implements Serializable {
    }

  @Transactional(isolation= Isolation.DEFAULT,propagation = Propagation.REQUIRED ,readOnly = false)
    @Override
    public void delTestByid(int id){
      testDao.del(id);
        int a=  1/0;
    }

    @Override
    public void updateTest(Test test) {
     testDao.update(test);
    }
}
